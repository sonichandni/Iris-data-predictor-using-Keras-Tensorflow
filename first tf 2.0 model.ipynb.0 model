import numpy as np
import keras as K
import tensorflow as tf

def main():
  print("\nItis dataset using Keras/Trnsorfloe")
  np.random.seed(4)
  tf.set_random_seed(13)

  print("loading iris data into memory \n")
  train_file = "train_dataset.txt"
  test_file = "test_dataset.txt"

  train_x = np.loadtxt(train_file, usecols=[0,1,2,3], delimiter=",", skiprows=0, dtype=np.float32)
  train_y = np.loadtxt(train_file, usecols=[4,5,6], delimiter=",", skiprows=0, dtype=np.float32)

  test_x = np.loadtxt(test_file, usecols=range(0,4), delimiter=",", skiprows=0, dtype=np.float32)
  test_y = np.loadtxt(test_file, usecols=range(4,7), delimiter=",", skiprows=0, dtype=np.float32)

  init = K.initializers.glorot_uniform(seed=1)
  simple_adam = K.optimizers.Adam()
  model = K.models.Sequential()
  model.add(K.layers.Dense(units=5, input_dim=4, kernel_initializer=init, activation='relu'))
  model.add(K.layers.Dense(units=6, kernel_initializer=init, activation='relu'))
  model.add(K.layers.Dense(units=3, kernel_initializer=init, activation='softmax'))
  model.compile(loss='categorical_crossentropy', optimizer=simple_adam, metrics=['accuracy'])

  b_size = 1
  max_epochs = 10
  print("starting training")
  h = model.fit(train_x, train_y, batch_size=b_size, epochs=max_epochs, shuffle=True, verbose=1)
  print("training end \n")

  eval = model.evaluate(test_x, test_y, verbose=0)
  # print("Evaluation on test data: loss = %0.6f accuracy = %0.2f%% \n" \ % (eval[0], eval[1]*100) )

  print("Saving model \n")
  mp = ".\\Models\\iris_model.h5"
  model.save(mp)

  np.set_printoptions(precision=4)
  unknown = np.array([[4.9,3.0,1.4,0.2]], dtype=np.float32)
  predicted = model.predict(unknown)
  print("Using model to predict species for features: ")
  print(unknown)
  print("\n Predicted species is: ")
  print(predicted)

if __name__=="__main__":
  main()
