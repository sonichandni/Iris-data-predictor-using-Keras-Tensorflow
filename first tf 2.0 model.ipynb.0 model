{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"first tf 2.0 model.ipynb","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"6RbmCvJtna3g","colab_type":"code","colab":{}},"source":["import numpy as np\n","import keras as K\n","import tensorflow as tf"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YuX9WX7lvlcI","colab_type":"code","colab":{}},"source":["def main():\n","  print(\"\\nItis dataset using Keras/Trnsorfloe\")\n","  np.random.seed(4)\n","  tf.set_random_seed(13)\n","\n","  print(\"loading iris data into memory \\n\")\n","  train_file = \"train_dataset.txt\"\n","  test_file = \"test_dataset.txt\"\n","\n","  train_x = np.loadtxt(train_file, usecols=[0,1,2,3], delimiter=\",\", skiprows=0, dtype=np.float32)\n","  train_y = np.loadtxt(train_file, usecols=[4,5,6], delimiter=\",\", skiprows=0, dtype=np.float32)\n","\n","  test_x = np.loadtxt(test_file, usecols=range(0,4), delimiter=\",\", skiprows=0, dtype=np.float32)\n","  test_y = np.loadtxt(test_file, usecols=range(4,7), delimiter=\",\", skiprows=0, dtype=np.float32)\n","\n","  init = K.initializers.glorot_uniform(seed=1)\n","  simple_adam = K.optimizers.Adam()\n","  model = K.models.Sequential()\n","  model.add(K.layers.Dense(units=5, input_dim=4, kernel_initializer=init, activation='relu'))\n","  model.add(K.layers.Dense(units=6, kernel_initializer=init, activation='relu'))\n","  model.add(K.layers.Dense(units=3, kernel_initializer=init, activation='softmax'))\n","  model.compile(loss='categorical_crossentropy', optimizer=simple_adam, metrics=['accuracy'])\n","\n","  b_size = 1\n","  max_epochs = 10\n","  print(\"starting training\")\n","  h = model.fit(train_x, train_y, batch_size=b_size, epochs=max_epochs, shuffle=True, verbose=1)\n","  print(\"training end \\n\")\n","\n","  eval = model.evaluate(test_x, test_y, verbose=0)\n","  # print(\"Evaluation on test data: loss = %0.6f accuracy = %0.2f%% \\n\" \\ % (eval[0], eval[1]*100) )\n","\n","  print(\"Saving model \\n\")\n","  mp = \".\\\\Models\\\\iris_model.h5\"\n","  model.save(mp)\n","\n","  np.set_printoptions(precision=4)\n","  unknown = np.array([[4.9,3.0,1.4,0.2]], dtype=np.float32)\n","  predicted = model.predict(unknown)\n","  print(\"Using model to predict species for features: \")\n","  print(unknown)\n","  print(\"\\n Predicted species is: \")\n","  print(predicted)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"w-Zibt4F0CgZ","colab_type":"code","outputId":"023aaf3e-1c3d-4f7b-812e-541360dc2b59","executionInfo":{"status":"ok","timestamp":1571571881735,"user_tz":-330,"elapsed":6407,"user":{"displayName":"Chandni Soni","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCucQhoDK99q-d-69drn4dAf4zel2-j3rXx9PkfVw=s64","userId":"03937418399616257825"}},"colab":{"base_uri":"https://localhost:8080/","height":635}},"source":["if __name__==\"__main__\":\n","  main()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["\n","Itis dataset using Keras/Trnsorfloe\n","loading iris data into memory \n","\n","starting training\n","Epoch 1/10\n","120/120 [==============================] - 1s 7ms/step - loss: 1.5277 - acc: 0.4250\n","Epoch 2/10\n","120/120 [==============================] - 0s 1ms/step - loss: 1.0313 - acc: 0.4500\n","Epoch 3/10\n","120/120 [==============================] - 0s 1ms/step - loss: 0.8432 - acc: 0.5750\n","Epoch 4/10\n","120/120 [==============================] - 0s 1ms/step - loss: 0.7306 - acc: 0.8167\n","Epoch 5/10\n","120/120 [==============================] - 0s 1ms/step - loss: 0.6635 - acc: 0.9167\n","Epoch 6/10\n","120/120 [==============================] - 0s 1ms/step - loss: 0.6022 - acc: 0.8917\n","Epoch 7/10\n","120/120 [==============================] - 0s 1ms/step - loss: 0.5511 - acc: 0.9000\n","Epoch 8/10\n","120/120 [==============================] - 0s 1ms/step - loss: 0.4866 - acc: 0.9167\n","Epoch 9/10\n","120/120 [==============================] - 0s 1ms/step - loss: 0.4233 - acc: 0.9333\n","Epoch 10/10\n","120/120 [==============================] - 0s 1ms/step - loss: 0.3581 - acc: 0.9250\n","training end \n","\n","Saving model \n","\n","Using model to predict species for features: \n","[[4.9 3.  1.4 0.2]]\n","\n"," Predicted species is: \n","[[0.7952 0.1417 0.0631]]\n"],"name":"stdout"}]}]}